// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_template/test/modules/home/domain/usecases/get_weather_by_city_name_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_template/core/error/failures.dart' as _i5;
import 'package:flutter_template/modules/home/domain/entity/weather_entity.dart'
    as _i6;
import 'package:flutter_template/modules/home/domain/repository/home_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i3.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherEntity>> getWeatherByLocation({
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherByLocation,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.WeatherEntity>(
          this,
          Invocation.method(
            #getWeatherByLocation,
            [],
            {
              #latitude: latitude,
              #longitude: longitude,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherEntity>> getWeatherByCityName(
          {required String? cityName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherByCityName,
          [],
          {#cityName: cityName},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.WeatherEntity>(
          this,
          Invocation.method(
            #getWeatherByCityName,
            [],
            {#cityName: cityName},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherEntity>>);
}
